const express = require('express');
const router = express.Router();
const fs = require('fs-extra');
const path = require('path');
const axios = require('axios');
const crypto = require('crypto');

const { 
  TELEGRAM_BOT_TOKEN, 
  EXECUTOR_CHAT_ID, 
  TEST_THREAD_ID, 
  WEBHOOK_SECRET, 
  YOOKASSA_SECRET_KEY,

  // ---–ó–ê–ì–õ–£–®–ö–ê: –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É---
  NODE_ENV
} = require('../config.js');

const ORDERS_JSON = path.join(__dirname, '../data/orders.json');
const LOG_FILE = path.join(__dirname, '../logs/webhooks.log');

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –ÆKassa ---
function verifyYookassaSignature(body, signature, secret) {

  // ---–ó–ê–ì–õ–£–®–ö–ê: –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É---
  if (NODE_ENV === 'test' || NODE_ENV === 'development') {
    console.log('‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –ÆKassa');
    return true;
  }

  if (!signature) return false;
  const payload = JSON.stringify(body);
  const hmac = crypto
    .createHmac('sha256', secret)
    .update(payload)
    .digest('base64');

  try {
    return crypto.timingSafeEqual(Buffer.from(hmac), Buffer.from(signature));
  } catch {
    return false;
  }
}

// --- Webhook handler ---
router.post('/', async (req, res) => {
  try {
    const webhookData = req.body;
    const payment = webhookData?.object || {};
    const metadata = payment?.metadata || {};
    const event = webhookData?.event;

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞ ---

    // ---–ó–ê–ì–õ–£–®–ö–ê: –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É---
    if(NODE_ENV !== 'test' && NODE_ENV !== 'development'){
      const webhookSecret = req.headers['x-webhook-secret'];
      if (!webhookSecret || webhookSecret !== WEBHOOK_SECRET) {
        return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á' });
      }
    } else{
      console.log('‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ webhook —Å–µ–∫—Ä–µ—Ç–∞');
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –ÆKassa ---
    const signature = req.headers['x-content-signature'] || req.headers['authorization'];
    if (!verifyYookassaSignature(webhookData, signature, YOOKASSA_SECRET_KEY)) {
      return res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –ÆKassa' });
    }

    // --- –õ–æ–≥–∏—Ä—É–µ–º webhook ---
    await fs.ensureFile(LOG_FILE);
    let logLines = [];
    if (await fs.pathExists(LOG_FILE)) {
      const raw = await fs.readFile(LOG_FILE, 'utf-8');
      logLines = raw.trim().split(',\n').filter(Boolean);
    }

    const logData = {
      timestamp: new Date().toISOString(),
      raw: webhookData,
      parsed: {
        order_id: metadata.order_id,
        username: metadata.username,
        name: metadata.name,
        phone: metadata.phone,
        pickup_point: metadata.pickup_point,
        items: metadata.items ? JSON.parse(metadata.items) : [],
        total: payment.amount?.value,
        currency: payment.amount?.currency,
        status: payment.status
      }
    };

    logLines.push(JSON.stringify(logData, null, 2));
    if (logLines.length > 1000) {
      logLines = logLines.slice(-1000);
    }
    await fs.writeFile(LOG_FILE, logLines.join(',\n') + ',\n');

    // --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –≤ Telegram ---
    if (TELEGRAM_BOT_TOKEN && EXECUTOR_CHAT_ID && TEST_THREAD_ID) {
      try {
        const message = JSON.stringify(logData, null, 2);
        await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
          chat_id: EXECUTOR_CHAT_ID,
          message_thread_id: Number(TEST_THREAD_ID),
          text: message
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤ –≤ Telegram:', error.message);
      }
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏—è ---
    if (event !== 'payment.succeeded') {
      return res.status(200).json({ ok: true, note: 'ignored non-succeeded event' });
    }

    const orderId = metadata?.order_id;
    if (!orderId) {
      return res.status(400).json({ error: 'order_id –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // --- –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã ---
    let orders = [];
    if (await fs.pathExists(ORDERS_JSON)) {
      const raw = await fs.readFile(ORDERS_JSON, 'utf-8');
      orders = raw.trim() ? JSON.parse(raw) : [];
    }

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑
    const index = orders.findIndex(o => o.id === orderId);
    if (index === -1) {
      return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const order = orders[index];

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã ---

    // --- –ó–ê–ì–õ–£–®–ö–ê: –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É–º–º—ã ---
    if(NODE_ENV !== 'test' && NODE_ENV !== 'development'){
      const webhookAmount = parseFloat(payment.amount?.value || '0');
      const orderTotal = Number(order.total) || 0;
      if (webhookAmount > 0 && orderTotal > 0 && Math.abs(webhookAmount - orderTotal) > 0.01) {
        console.error(`‚ùå –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—É–º–º—ã: webhook=${webhookAmount} vs order=${orderTotal} (order_id=${orderId})`);
        return res.status(400).json({ error: '–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å—É–º–º–æ–π –∑–∞–∫–∞–∑–∞' });
      }
    }

    // --- –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å ---
    if (order.paid === true) {
      return res.status(200).json({ ok: true, note: 'order already paid' });
    }

    // --- –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ ---
    order.paid = true;
    order.payment_info = {
      provider: 'yookassa',
      payment_id: payment.id || null,
      amount: payment.amount || null,
      paid_at: payment.created_at || new Date().toISOString(),
      event
    };
    orders[index] = order;
    await fs.writeJSON(ORDERS_JSON, orders, { spaces: 2 });

    // --- –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ---
    const customerItems = (order.items || [])
      .map(i => `- ${i.name} √ó${i.qty} ‚Äî ${i.price * i.qty} ‚ÇΩ`)
      .join('\n');

    const notifyMsg = `
üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!
üë§ –§–ò–û: ${order.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}
üìç –ü–í–ó: ${order.pickup_point}
üîó Telegram: ${order.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üì¶ –¢–æ–≤–∞—Ä—ã:
${customerItems || '‚Äî'}

üí∞ –°—É–º–º–∞: ${order.total} ‚ÇΩ
üí≥ –û–ø–ª–∞—Ç–∞: ‚úÖ –û–ø–ª–∞—á–µ–Ω–æ
    `.trim();

    await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      chat_id: EXECUTOR_CHAT_ID,
      message_thread_id: Number(TEST_THREAD_ID),
      text: notifyMsg
    });

    res.sendStatus(200);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ payment-callback:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// --- –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ webhook ---
router.post('/test-webhook', async (req, res) => {
  if (NODE_ENV !== 'test' && NODE_ENV !== 'development') {
    return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ' });
  }

  try {
    const { order_id, amount = 1000 } = req.body;
    
    const testWebhookData = {
      event: 'payment.succeeded',
      object: {
        id: 'test_payment_' + Date.now(),
        status: 'succeeded',
        amount: {
          value: amount,
          currency: 'RUB'
        },
        metadata: {
          order_id: order_id,
          username: 'test_user',
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          phone: '+79999999999',
          pickup_point: 'TEST_123',
          items: JSON.stringify([{ name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä', price: 500, qty: 2 }])
        },
        created_at: new Date().toISOString()
      }
    };

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    req.body = testWebhookData;
    req.headers = {
      'x-webhook-secret': WEBHOOK_SECRET,
      'authorization': 'test_signature'
    };

    await router.handle(req, res);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º webhook:', error);
    res.status(500).json({ error: '–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞' });
  }
});

module.exports = router;
