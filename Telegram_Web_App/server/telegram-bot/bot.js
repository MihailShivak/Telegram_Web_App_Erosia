const TelegramBot = require('node-telegram-bot-api');
const fsExtra = require('fs-extra');
const path = require('path');
const { TELEGRAM_BOT_TOKEN, EXECUTOR_CHAT_ID, TEST_THREAD_ID, WEB_APP_URL } = require('./config');

// --- Init bot ---
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

// --- userState –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è ---
const userState = {};

// --- Blacklist ---
const BLACKLIST_FILE = path.join(__dirname, 'data/blacklist.json');
const rateLimitMap = new Map();

async function loadBlacklist() {
  if (!(await fsExtra.pathExists(BLACKLIST_FILE))) return [];
  return await fsExtra.readJSON(BLACKLIST_FILE);
}

async function saveBlacklist(list) {
  await fsExtra.writeJSON(BLACKLIST_FILE, list, { spaces: 2 });
}

async function isBlacklisted(userId) {
  const list = await loadBlacklist();
  return list.includes(userId);
}

async function addToBlacklist(userId) {
  const list = await loadBlacklist();
  if (!list.includes(userId)) {
    list.push(userId);
    await saveBlacklist(list);
  }
}

// --- Spam Protection ---
async function checkSpam(msg) {
  const userId = msg.from.id;

  // –ï—Å–ª–∏ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
  if (await isBlacklisted(userId)) {
    bot.sendMessage(userId, 'üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º.');
    return false;
  }

  const now = Date.now();
  if (!rateLimitMap.has(userId)) {
    rateLimitMap.set(userId, []);
  }

  const timestamps = rateLimitMap.get(userId).filter(t => now - t < 60 * 1000);
  timestamps.push(now);
  rateLimitMap.set(userId, timestamps);

  if (timestamps.length > 5) {
    await addToBlacklist(userId);
    bot.sendMessage(userId, 'üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.');
    return false;
  }

  return true;
}

// --- –ü–æ–¥—Å–∫–∞–∑–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ ---
bot.setMyCommands([
  { command: '/start', description: '‚ú® –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
  { command: '/help', description: 'üìã –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' },
  { command: '/shop', description: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω' },
  { command: '/support', description: '‚ùì –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É' },
  { command: '/stop', description: 'üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è' }
]);

// --- /start ---
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω',
            web_app: { url: WEB_APP_URL }
          }
        ],
        [
          {
            text: '‚ùì –ü–æ–º–æ—â—å',
            callback_data: 'support'
          }
        ]
      ]
    }
  });
});

// --- /help ---
bot.onText(/\/help/, (msg) => {
  const helpCommandText = `
üìù *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start -  ‚ú® –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help -  üìã –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/shop -  üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω
/support -  ‚ùì –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
/stop -  üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
  `;

  bot.sendMessage(msg.chat.id, helpCommandText, { parse_mode: 'Markdown' });
});

// --- /shop ---
bot.onText(/\/shop/, (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId, 'üõçÔ∏è –•–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω ?', {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω',
            web_app: { url: WEB_APP_URL }
          }
        ]
      ]
    }
  });
});

// --- /support ---
bot.onText(/\/support/, (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId, 'üÜò –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è ?', {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: 'üÜò –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è',
            callback_data: 'support'
          }
        ]
      ]
    }
  });
});

// --- /stop ---
bot.onText(/\/stop/, (msg) => {
  const chatId = msg.chat.id;

  if (userState[chatId] === 'awaiting_support') {
    bot.sendMessage(chatId, '‚ùó –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è');
  } else {
    bot.sendMessage(chatId, `
‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
‚ú® –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start
    `);
  }
});

// --- callback –æ–±—Ä–∞–±–æ—Ç–∫–∞ (support) ---
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;

  if (query.data === 'support') {
    bot.sendMessage(chatId, `
‚ùó –û–±—Ä–∞—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:

üë§ –§–ò–û: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +79123456789
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: –ú–Ω–µ –Ω—É–∂–Ω–∞ –ü–æ–º–æ—â—å !

–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:
    `);
    userState[chatId] = 'awaiting_support';
    bot.answerCallbackQuery(query.id);
  }
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º ---
  const ok = await checkSpam(msg);
  if (!ok) return;

  if (text.startsWith('/')) return;

  if (userState[chatId] === 'awaiting_support') {
    const username = msg.from.username ? `@${msg.from.username}` : '–Ω–µ —É–∫–∞–∑–∞–Ω';
    const supportMessage = `
üì© –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üÜî ID: ${msg.from.id}
üë§ Username: ${username}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
${text}
    `;

    bot.sendMessage(EXECUTOR_CHAT_ID, supportMessage.trim(), {
      message_thread_id: Number(TEST_THREAD_ID)
    });
    bot.sendMessage(chatId, `‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`);
    delete userState[chatId];
  }
});
